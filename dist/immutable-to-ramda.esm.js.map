{"version":3,"file":"immutable-to-ramda.esm.js","sources":["../src/transformers.ts","../src/utils.ts","../src/index.ts"],"sourcesContent":["import { types } from 'recast';\nimport { NodePath } from 'ast-types/lib/node-path';\nimport { namedTypes } from 'ast-types/gen/namedTypes';\nimport { pluck, propEq, isEmpty, difference, fromPairs } from 'ramda';\nimport {\n  FunctionCall,\n  GetTransformation,\n  ImmutableToRamdaMap,\n  TransformationMap,\n} from './types';\n// TODO: handle empty List(), Map()\n// TODO: handle space in literal string on get\n\nconst {\n  identifier,\n  stringLiteral,\n  callExpression,\n  memberExpression,\n  objectExpression,\n  arrayExpression,\n  importDeclaration,\n  importSpecifier,\n} = types.builders;\n\nconst functionsToImport: Set<string> = new Set();\n\nconst transformers: types.Visitor = {\n  visitCallExpression: function (path) {\n    const functionCallName: string = path.value.callee.property?.name;\n    const calleeNode = path.node.callee as namedTypes.MemberExpression;\n\n    const avoidThisExpr =\n      //@ts-ignore\n      !['R', 'this'].includes(calleeNode?.object?.name) &&\n      calleeNode?.object?.type !== 'ThisExpression';\n    const isSupported = Object.keys(transformersMap).includes(functionCallName);\n\n    if (isSupported && avoidThisExpr) {\n      const { ramdaFn, transformation } = transformersMap[functionCallName];\n\n      transformation({\n        path,\n        callee: calleeNode.object,\n        args: path.node.arguments,\n      });\n      functionsToImport.add(ramdaFn);\n    }\n\n    if (\n      ['fromJS', 'toJS', 'fromArray', 'List', 'Map'].includes(\n        path.value?.callee?.name\n      )\n    ) {\n      unwrapCaller({\n        path,\n        callee: path.value?.callee,\n        args: path.node.arguments,\n      });\n    }\n    this.traverse(path);\n  },\n};\n\nexport const importTransformer: types.Visitor = {\n  visitImportDeclaration: function (path) {\n    addImport(path);\n    this.traverse(path);\n  },\n};\n\nconst getterSetter =\n  (newFn: string, isGetter = true) =>\n  ({ path, callee, args }: FunctionCall) => {\n    const [propName] = args;\n    if (callee.type === 'ThisExpression') return;\n\n    const hasDefaultValue = args.length > 1 && isGetter;\n    const functionName = identifier(`${newFn}${hasDefaultValue ? 'Or' : ''}`);\n    const newArgs = hasDefaultValue ? args.reverse() : args;\n\n    const expr =\n      isGetter && propName.type === 'StringLiteral'\n        ? memberExpression(callee, identifier(propName.value))\n        : callExpression(functionName, [...newArgs, callee]);\n\n    path.replace(expr);\n  };\n\nconst getIn = ({ path, args, callee }: FunctionCall) => {\n  const [propsArray, ...defValue] = args;\n  const allLiteral = (x: any[]): x is types.namedTypes.StringLiteral[] =>\n    x.every(propEq('type', 'StringLiteral'));\n\n  if (!isEmpty(defValue)) {\n    const expr = callExpression(identifier('pathOr'), [\n      defValue[0],\n      propsArray,\n      callee,\n    ]);\n    path.replace(expr);\n    return;\n  }\n\n  const { elements } = propsArray;\n\n  const expr =\n    propsArray.type === 'ArrayExpression' && allLiteral(elements)\n      ? pluck('value', elements)\n          .map(identifier)\n          .reduce(\n            (acc, curr) =>\n              memberExpression.from({\n                object: acc,\n                property: curr,\n                optional: true,\n              }),\n            callee\n          )\n      : callExpression(identifier('path'), [propsArray, callee]);\n  path.replace(expr);\n};\n\nconst callerToArg =\n  (newFn: string) =>\n  ({ path, callee }: FunctionCall) => {\n    path.replace(callExpression(identifier(newFn), [callee]));\n  };\nconst callerAsLastArg =\n  (newFn: string) =>\n  ({ path, callee, args }: FunctionCall) => {\n    path.replace(callExpression(identifier(newFn), [...args, callee]));\n  };\nconst callerAsFirstArg =\n  (newFn: string) =>\n  ({ path, callee, args }: FunctionCall) => {\n    path.replace(callExpression(identifier(newFn), [callee, ...args]));\n  };\nconst unwrapCaller = ({ path, callee, args }: FunctionCall) => {\n  const expr = isEmpty(args)\n    ? //@ts-ignore\n      { Map: objectExpression([]), List: arrayExpression([]) }[callee.name]\n    : args[0];\n  path.replace(expr);\n};\n\nexport const nameAndTransform = (\n  ts: GetTransformation,\n  immutableRamdamap: ImmutableToRamdaMap\n) =>\n  fromPairs(\n    Object.entries(immutableRamdamap).map(([immutableFn, ramdaFn]) => [\n      immutableFn,\n      { ramdaFn, transformation: ts(ramdaFn) },\n    ])\n  );\n\nconst transformersMap: TransformationMap = {\n  ...nameAndTransform(callerAsLastArg, {\n    Map: 'fromPairs',\n    filterNot: 'reject',\n    zip: 'zip',\n    updateIn: 'modifyPath',\n    groupBy: 'groupBy',\n    update: 'modify',\n    findLast: 'findLast',\n    delete: 'dissoc',\n    deleteIn: 'dissocPath',\n    valueSeq: 'values',\n  }),\n  ...nameAndTransform(callerToArg, {\n    keySeq: 'keys',\n    flatten: 'flatten',\n    isEmpty: 'isEmpty',\n    flip: 'invertObj',\n  }),\n  ...nameAndTransform(callerAsFirstArg, { merge: 'mergeRight' }),\n  getIn: { ramdaFn: 'pathOr', transformation: getIn },\n  get: { ramdaFn: 'prop', transformation: getterSetter('prop') },\n  set: { ramdaFn: 'assoc', transformation: getterSetter('assoc', false) },\n  setIn: {\n    ramdaFn: 'assocPath',\n    transformation: getterSetter('assocPath', false),\n  },\n  sortBy: {\n    ramdaFn: 'sort',\n    transformation: ({ path, callee, args }: FunctionCall) => {\n      path.replace(\n        callExpression(identifier(`sort`), [\n          callExpression(identifier('ascend'), args),\n          callee,\n        ])\n      );\n      functionsToImport.add('ascend');\n    },\n  },\n  toJS: {\n    ramdaFn: '',\n    transformation: ({ path, callee }: FunctionCall) => {\n      path.replace(callee);\n    },\n  },\n};\n\nfunction addImport(path: NodePath<types.namedTypes.ImportDeclaration, any>) {\n  if (path.value.source.value !== 'ramda') return;\n  const imports = path.value.specifiers ?? [];\n  const importsIdentifiers = imports.map((s: any) => s?.imported?.name);\n  const newImportsIdentifiers = difference(\n    Array.from(functionsToImport),\n    importsIdentifiers\n  );\n\n  const newImports = newImportsIdentifiers\n    .filter(Boolean)\n    .map((f) => importSpecifier(identifier(f)));\n\n  const importExpr = importDeclaration(\n    [...imports, ...newImports],\n    stringLiteral('ramda')\n  );\n  path.replace(importExpr);\n}\n\nexport default transformers;\n","import { parse, print, visit } from 'recast';\nimport transformers, { importTransformer } from './transformers';\nimport { promises } from 'fs';\nimport { diffLines } from 'diff';\nimport { parseSync } from '@babel/core';\nimport chalk from 'chalk';\nimport signale from 'signale';\n\nconst parseFile = async (path: string) =>\n  promises\n    .readFile(path, 'utf-8')\n    .then((src) => ({\n      src,\n      ast: parse(src, {\n        parser: {\n          parse: (source: string) =>\n            parseSync(source, {\n              plugins: [[`@babel/plugin-syntax-typescript`, { isTSX: true }]],\n              overrides: [\n                {\n                  test: [`**/*.ts`, `**/*.tsx`],\n                  plugins: [\n                    [`@babel/plugin-syntax-typescript`, { isTSX: true }],\n                  ],\n                },\n              ],\n              filename: path,\n              parserOpts: {\n                tokens: true,\n              },\n            }),\n        },\n      }),\n    }))\n    .catch((err: any) => {\n      signale.error(`unable to parse ${path}`);\n      signale.error(err);\n    });\n\nconst transformSource = async (path: string) => {\n  const code = await parseFile(path);\n  if (!code) return;\n  const { src, ast } = code;\n  visit(ast, transformers);\n  visit(ast, importTransformer);\n  const newSrc = print(ast).code;\n  return src === newSrc ? false : { src, newSrc };\n};\n\nexport const printDiff = async (path: string) => {\n  const code = await transformSource(path);\n  if (!code) return;\n  diffLines(code.src, code.newSrc).forEach((part) => {\n    const color = part.added ? 'green' : part.removed ? 'red' : null;\n    if (color) console.log(chalk[color](part.value));\n  });\n};\n\nexport const rewriteSource = async (path: string) => {\n  const code = await transformSource(path);\n  if (!code) return;\n  const newFh = await promises.open(path, 'w');\n  newFh.writeFile(code.newSrc);\n  signale.success(`${path} written`);\n};\n","import { program } from 'commander';\nimport { printDiff, rewriteSource } from './utils';\n\nprogram.option('--dry');\nconst args = program.parse(process.argv);\n\nargs.args.forEach(program.opts().dry ? printDiff : rewriteSource);\n"],"names":["types","builders","identifier","stringLiteral","callExpression","memberExpression","objectExpression","arrayExpression","importDeclaration","importSpecifier","functionsToImport","Set","transformers","visitCallExpression","path","functionCallName","value","callee","property","name","calleeNode","node","avoidThisExpr","includes","object","type","isSupported","Object","keys","transformersMap","ramdaFn","transformation","args","arguments","add","unwrapCaller","traverse","importTransformer","visitImportDeclaration","addImport","getterSetter","newFn","isGetter","propName","hasDefaultValue","length","functionName","newArgs","reverse","expr","replace","getIn","propsArray","defValue","allLiteral","x","every","propEq","isEmpty","elements","pluck","map","reduce","acc","curr","from","optional","callerToArg","callerAsLastArg","callerAsFirstArg","Map","List","nameAndTransform","ts","immutableRamdamap","fromPairs","entries","immutableFn","filterNot","zip","updateIn","groupBy","update","findLast","deleteIn","valueSeq","keySeq","flatten","flip","merge","get","set","setIn","sortBy","toJS","source","imports","specifiers","importsIdentifiers","s","imported","newImportsIdentifiers","difference","Array","newImports","filter","Boolean","f","importExpr","parseFile","promises","readFile","then","src","ast","parse","parser","parseSync","plugins","isTSX","overrides","test","filename","parserOpts","tokens","err","signale","error","transformSource","code","visit","newSrc","print","printDiff","diffLines","forEach","part","color","added","removed","console","log","chalk","rewriteSource","open","newFh","writeFile","success","program","option","process","argv","opts","dry"],"mappings":"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"}